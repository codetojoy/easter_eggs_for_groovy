
ant.property( file : 'build.properties' )

final classDir = ant.project.properties.'classes.dir'
final mainApp = ant.project.properties.'main.app'
final dataDir = ant.project.properties.'data.dir'
final groovyHome = ant.project.properties.'groovy.home'
final groovyEmbeddedJar = groovyHome + ant.project.properties.'groovy.embedded.jar'
final reportDir = ant.project.properties.'report.dir'

// clean (implicit target)
includeTargets << gant.targets.Clean
cleanDirectory << classDir
cleanDirectory << reportDir

// init
target( init : '' ) { 
    // contains JUnit and jars for Groovy scripts
    path( id : 'groovy.classpath' ) {
        pathelement( location : '${classes.dir}' )
        pathelement( location : "${groovyEmbeddedJar}" )    
        ant.fileset( dir : "${groovyHome}/lib") {
            ant.include( name : '**/*.jar' )
        }
    }
    path( id : 'build.classpath' ) {
        pathelement( location : '${classes.dir}' )
        pathelement( location : "${groovyEmbeddedJar}")
    }    
    ant.mkdir( dir : reportDir )
}

final performCompile = { sourceDir ->
    classpathRef = 'build.classpath'
    ant.mkdir ( dir : classDir )
    ant.taskdef ( name : 'groovyc' , classname : 'org.codehaus.groovy.ant.Groovyc' , classpathref : classpathRef )
    ant.groovyc ( srcdir : sourceDir , destdir : classDir , fork : 'false', failonerror : 'true' ) {
        classpath {
            pathelement ( location : classDir )
        }
        javac ( source : '1.5' , target : '1.5' , debug : 'on' )
    }
}

// compile
target( compile : 'compile' ) {
    depends( init )

    performCompile( '${src.dir}' )
    performCompile( '${test.src.dir}' )
}

target( test : 'execute all tests' ) {
    depends( compile ) 
    
    ant.junit( printsummary:'yes', haltonfailure:'yes' ) {
        ant.classpath() {
            ant.path( refid : 'groovy.classpath' )
        }

        ant.batchtest( fork:'yes', todir:"${reportDir}" ) {
            formatter(type:'plain')
            ant.fileset( dir : classDir ) {
                ant.include( name : '**/*Test*.*' )
                // we don't want to test inner closure classes!
                ant.exclude( name : '**/*_closure*.*')                
            }
        } 
    }
}

// obsolete? 
target( test_one : 'execute one test specified by $test.file' ) {
    depends( compile ) 
    
    ant.junit( printsummary:'yes', haltonfailure:'yes') {
        ant.classpath() {
            ant.path( refid : 'groovy.classpath' )
        }

        def test = ant.project.properties.'test.file'
        def pkg = ant.project.properties.'main.package'
        ant.test( name : "${pkg}.${test}", outfile:"${reportDir}/junit_report") {
            formatter(type:'plain')
        }
    }
}

final runOneFile = { dataFile ->
    def errorLog = new File("error.log")
    errorLog.delete()

    ant.java( classname:"${mainApp}" ) {
        ant.classpath() {
            ant.pathelement( location : '${classes.dir}')
            ant.path( refid : 'groovy.classpath' )
        }
        ant.arg( value: dataFile )
    }

    if (errorLog.exists()) {
        ant.fail(message : "found error.log for file: $dataFile")
    }    
}

// runs one file $data.dir, specified by $data.file
target( run : 'run app for file in $data.dir, specified by $data.file' ) {
    depends( compile ) 
    
    def file = ant.project.properties.'data.file'
    def dataFile = new File(dataDir + "/" + file)
    
    runOneFile(dataFile)
}

// runs each data file in $data.dir
target( run_all : 'run app for each data file in $data.dir' ) {
    depends( compile ) 
        
    new File(dataDir).eachFile { dataFile ->
        runOneFile(dataFile)
    }    
    
    echo( message : "all tests SUCCESSFUL")
}

setDefaultTarget( run_all )

